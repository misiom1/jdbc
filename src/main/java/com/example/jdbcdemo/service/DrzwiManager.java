package com.example.jdbcdemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.jdbcdemo.domain.Drzwi;

public class DrzwiManager {

	Connection connection;
	private String url = "jdbc:hsqldb:hsql://localhost/workdb";
	
	private String createTableDrzwi = "CREATE TABLE Drzwi(id bigint GENERATED BY DEFAULT AS IDENTITY, producent varchar(20), model varchar(20), kolor varchar(20))";
	private String createTableKlient = "CREATE TABLE Klient(id bigint GENERATED BY DEFAULT AS IDENTITY, imie varchar(20), nazwisko varchar(30))";
	private String createTableKup = "CREATE TABLE Kup(idDrzwi bigint, idKlient bigint)";
	private PreparedStatement addDrzwiStmt;
	private PreparedStatement deleteAllDrzwisStmt;
	private PreparedStatement getAllDrzwisStmt;
	private PreparedStatement deleteDrzwiStmt;
	private PreparedStatement deleteKlientStmt;
	private PreparedStatement deleteKupStmt;
	private PreparedStatement updateDrzwiStmt;
	private PreparedStatement deleteAllKlientsStmt;
	private PreparedStatement deleteAllKupsStmt;
	private PreparedStatement getAllKlientsStmt;
	private PreparedStatement addKlientStmt;
	private PreparedStatement addKupStmt;
	private PreparedStatement getKlientIdStmt;
	private PreparedStatement getDrzwiIdStmt;
	private PreparedStatement updateKlientStmt;
	private PreparedStatement getKlientDrzwiStmt;
	private PreparedStatement getDrzwisToKlientStmt;
	private Statement statement;
	public DrzwiManager() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableKlientExists = false;
			boolean tableKupExists = false;
			boolean tableDrzwiExists = false;
			while (rs.next()) {
				if ("Drzwi".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableDrzwiExists = true;
				}
				else if("Klient".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableKlientExists = true;
				}
				else if("Kup".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableKupExists = true;
				}
			}

			if (!tableDrzwiExists)
				statement.executeUpdate(createTableDrzwi);
			if(!tableKlientExists)
				statement.executeUpdate(createTableKlient);
			if(!tableKupExists)
				statement.executeUpdate(createTableKup);
			try {
				connection.setAutoCommit(false);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			addDrzwiStmt = connection
					.prepareStatement("INSERT INTO Drzwi (producent, model, kolor) VALUES (?, ?, ?)");
			deleteAllDrzwisStmt = connection
					.prepareStatement("DELETE FROM Drzwi");
			getAllDrzwisStmt = connection
					.prepareStatement("SELECT id, producent, model, kolor FROM Drzwi");
			updateDrzwiStmt = connection
					.prepareStatement("UPDATE Drzwi SET producent = ?, model = ?, kolor = ? WHERE producent = ? AND model = ? AND kolor = ?");
			deleteDrzwiStmt = connection
					.prepareStatement("DELETE FROM Drzwi WHERE producent = ? AND model = ? AND kolor = ?");
			deleteAllKlientsStmt = connection
					.prepareStatement("DELETE FROM Klient");
			deleteAllKupsStmt = connection
					.prepareStatement("DELETE FROM Kup");
			getAllKlientsStmt = connection
					.prepareStatement("SELECT * FROM Klient");
			addKlientStmt = connection
					.prepareStatement("INSERT INTO Klient (imie, nazwisko) VALUES (?, ?)");
			addKupStmt = connection
					.prepareStatement("INSERT INTO Kup (idDrzwi, idKlient) VALUES (?, ?)");
			getKlientIdStmt = connection
					.prepareStatement("SELECT id FROM Klient WHERE imie = ? AND nazwisko = ?");
			getDrzwiIdStmt = connection
					.prepareStatement("SELECT id FROM Drzwi WHERE producent = ? AND model = ? AND kolor = ?");
			deleteKupStmt = connection
					.prepareStatement("DELETE FROM Kup WHERE idDrzwi = ? AND idKlient = ?");
			deleteKlientStmt = connection
					.prepareStatement("DELETE FROM Klient WHERE imie = ? AND nazwisko = ?");
			updateKlientStmt = connection
					.prepareStatement("UPDATE Klient SET imie = ?, nazwisko = ? WHERE imie = ? AND nazwisko = ?");
			getKlientDrzwiStmt = connection
					.prepareStatement("SELECT * FROM (KUP k JOIN DRZWI d ON k.IDDRZWI = d.ID) JOIN KLIENT l ON l.ID = k.IDKLIENT");
			getDrzwisToKlientStmt = connection
					.prepareStatement("SELECT * FROM (KUP k JOIN DRZWI d ON k.IDDRZWI = d.ID) JOIN KLIENT l ON l.ID = k.IDKLIENT WHERE IMIE = ? AND NAZWISKO = ?");
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	Connection getConnection() {
		return connection;
	}

	void clearDrzwis() {
		try {
			deleteAllDrzwisStmt.executeUpdate();
			deleteAllKlientsStmt.executeUpdate();
			deleteAllKupsStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	public int deleteKlient(Drzwi klient) {
		int count = 0;
		try {
			deleteKlientStmt.setString(1, klient.getImie());
			deleteKlientStmt.setString(2, klient.getNazwisko());
			
			count = deleteKlientStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	public int deleteKup(Drzwi drzwi, Drzwi klient) {
		int count = 0, klientid, drzwiid;
		try {
			getKlientIdStmt.setString(1, klient.getImie());
			getKlientIdStmt.setString(2, klient.getNazwisko());
			ResultSet rs = getKlientIdStmt.executeQuery();
			rs.next();
			klientid = rs.getInt("id");
			getDrzwiIdStmt.setString(1, drzwi.getProducent());
			getDrzwiIdStmt.setString(2, drzwi.getModel());
			getDrzwiIdStmt.setString(3, drzwi.getKolor());
			ResultSet r = getKlientIdStmt.executeQuery();
			r.next();
			drzwiid = r.getInt("id");
			deleteKupStmt.setLong(1, drzwiid);
			deleteKupStmt.setLong(2, klientid);
			count = deleteKupStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return count;
	}
	public int addKlient(Drzwi drzwi) {
		int count = 0;
		try {
			addKlientStmt.setString(1, drzwi.getImie());
			addKlientStmt.setString(2, drzwi.getNazwisko());
			
			count = addKlientStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	public int addKup(Drzwi drzwi, Drzwi klient) {
		int count = 0, klientid, drzwiid;
		try {
			getKlientIdStmt.setString(1, klient.getImie());
			getKlientIdStmt.setString(2, klient.getNazwisko());
			ResultSet rs = getKlientIdStmt.executeQuery();
			rs.next();
			klientid = rs.getInt("id");
			getDrzwiIdStmt.setString(1, drzwi.getProducent());
			getDrzwiIdStmt.setString(2, drzwi.getModel());
			getDrzwiIdStmt.setString(3, drzwi.getKolor());
			ResultSet r = getDrzwiIdStmt.executeQuery();
			r.next();
			drzwiid = r.getInt("id");
			connection.commit();
			addKupStmt.setLong(1, drzwiid);
			addKupStmt.setLong(2, klientid);
			count = addKupStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	public int addDrzwi(Drzwi drzwi) {
		int count = 0;
		try {
			addDrzwiStmt.setString(1, drzwi.getProducent());
			addDrzwiStmt.setString(2, drzwi.getModel());
			addDrzwiStmt.setString(3, drzwi.getKolor());

			count = addDrzwiStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	public int updateDrzwi(Drzwi drzwi, String producent, String model, String kolor) {
		int count = 0;
		try {
			updateDrzwiStmt.setString(1, producent);
			updateDrzwiStmt.setString(2, model);
			updateDrzwiStmt.setString(3, kolor);
			updateDrzwiStmt.setString(4, drzwi.getProducent());
			updateDrzwiStmt.setString(5, drzwi.getModel());
			updateDrzwiStmt.setString(6, drzwi.getKolor());

			count = updateDrzwiStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return count;
	}
	public int updateKlient(Drzwi klient, String imie, String nazwisko) {
		int count = 0;
		try {
			updateKlientStmt.setString(1, imie);
			updateKlientStmt.setString(2, nazwisko);
			updateKlientStmt.setString(3, klient.getImie());
			updateKlientStmt.setString(4, klient.getNazwisko());
			
			count = updateKlientStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	public int deleteDrzwi(Drzwi drzwi) {
		int count = 0;
		try {
			deleteDrzwiStmt.setString(1, drzwi.getProducent());
			deleteDrzwiStmt.setString(2, drzwi.getModel());
			deleteDrzwiStmt.setString(3, drzwi.getKolor());
			count = deleteDrzwiStmt.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		return count;
	}
	public List<Drzwi> getAllDrzwis() {
		List<Drzwi> drzwis = new ArrayList<Drzwi>();

		try {
			ResultSet rs = getAllDrzwisStmt.executeQuery();

			while (rs.next()) {
				Drzwi d = new Drzwi();
				d.setId(rs.getInt("id"));
				d.setProducent(rs.getString("producent"));
				d.setModel(rs.getString("model"));
				d.setKolor(rs.getString("kolor"));
				drzwis.add(d);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return drzwis;
	}
	public List<Drzwi> getAllKlients() {
		List<Drzwi> klients = new ArrayList<Drzwi>();

		try {
			ResultSet rs = getAllKlientsStmt.executeQuery();

			while (rs.next()) {
				Drzwi d = new Drzwi();
				d.setKlientId(rs.getInt("id"));
				d.setImie(rs.getString("imie"));
				d.setNazwisko(rs.getString("nazwisko"));
				klients.add(d);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return klients;
	}
	public List<Drzwi> getAllDrzwiKlient() {
		List<Drzwi> drzwiKlient = new ArrayList<Drzwi>();
		try {
			ResultSet rs = getKlientDrzwiStmt.executeQuery();
			while(rs.next()) {
				Drzwi d = new Drzwi();
				d.setImie(rs.getString("imie"));
				d.setNazwisko(rs.getString("nazwisko"));
				d.setProducent(rs.getString("producent"));
				d.setModel(rs.getString("model"));
				d.setKolor(rs.getString("kolor"));
				drzwiKlient.add(d);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return drzwiKlient;
	}
	public List<Drzwi> getDrzwiToKlient(Drzwi klient) {
		List<Drzwi> drzwi = new ArrayList<Drzwi>();
		try {
			getDrzwisToKlientStmt.setString(1, klient.getImie());
			getDrzwisToKlientStmt.setString(2, klient.getNazwisko());
			ResultSet rs = getDrzwisToKlientStmt.executeQuery();
			while(rs.next()) {
				Drzwi d = new Drzwi();
				d.setImie(rs.getString("imie"));
				d.setNazwisko(rs.getString("nazwisko"));
				d.setProducent(rs.getString("producent"));
				d.setModel(rs.getString("model"));
				d.setKolor(rs.getString("kolor"));
				drzwi.add(d);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return drzwi;
	}
	public void Commit() {
		try {
			connection.commit();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
